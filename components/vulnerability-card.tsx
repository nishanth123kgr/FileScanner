import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ArrowRight } from "lucide-react"

interface VulnerabilityCardProps {
  title: string
  severity: "Critical" | "High" | "Medium" | "Low"
  target: string
  description: string
  recommendation: string
  cve: string
}

export default function VulnerabilityCard({
  title,
  severity,
  target,
  description,
  recommendation,
  cve,
}: VulnerabilityCardProps) {
  const getSeverityColor = () => {
    switch (severity) {
      case "Critical":
        return {
          bg: "bg-red-500/10",
          text: "text-red-500",
          badge: "bg-red-500/20 text-red-500 hover:bg-red-500/30",
          border: "border-red-500/30",
        }
      case "High":
        return {
          bg: "bg-orange-500/10",
          text: "text-orange-500",
          badge: "bg-orange-500/20 text-orange-500 hover:bg-orange-500/30",
          border: "border-orange-500/30",
        }
      case "Medium":
        return {
          bg: "bg-yellow-500/10",
          text: "text-yellow-500",
          badge: "bg-yellow-500/20 text-yellow-500 hover:bg-yellow-500/30",
          border: "border-yellow-500/30",
        }
      case "Low":
        return {
          bg: "bg-blue-500/10",
          text: "text-blue-500",
          badge: "bg-blue-500/20 text-blue-500 hover:bg-blue-500/30",
          border: "border-blue-500/30",
        }
    }
  }

  const colorClasses = getSeverityColor()

  return (
    <Card
      className={`card-glassmorphism ${colorClasses.bg} border-0 bg-gradient-to-br from-zinc-900/80 to-black/80 backdrop-blur-xl border-l-2 ${colorClasses.border} p-6 relative overflow-hidden`}
    >
      <div className="flex justify-between items-start mb-4">
        <h3 className="text-lg font-medium text-white">{title}</h3>
        <Badge className={colorClasses.badge}>{severity}</Badge>
      </div>

      <div className="space-y-3 mb-4">
        <div className="flex items-center gap-2 p-2 rounded-lg glassmorphism">
          <span className="text-xs text-zinc-400">Target:</span>
          <span className="text-sm text-zinc-200">{target}</span>
        </div>

        <p className="text-sm text-zinc-300">{description}</p>

        <div className="pt-2 p-2 rounded-lg glassmorphism">
          <span className="text-xs text-zinc-400">Recommendation:</span>
          <p className="text-sm text-zinc-300 mt-1">{recommendation}</p>
        </div>

        {cve !== "N/A" && (
          <div className="flex items-center gap-2 p-2 rounded-lg glassmorphism">
            <span className="text-xs text-zinc-400">CVE:</span>
            <span className="text-sm text-red-400">{cve}</span>
          </div>
        )}
      </div>

      <div className="flex justify-end">
        <Button variant="ghost" size="sm" className={`${colorClasses.text} gap-2`}>
          View Details <ArrowRight className="h-4 w-4" />
        </Button>
      </div>

      <div className="absolute -bottom-6 -right-6 w-24 h-24 rounded-full bg-gradient-to-br from-transparent to-white/5 blur-xl" />
    </Card>
  )
}
